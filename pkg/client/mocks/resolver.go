// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/technicianted/whip/pkg/client/types (interfaces: WhipEndpointResolver)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWhipEndpointResolver is a mock of WhipEndpointResolver interface.
type MockWhipEndpointResolver struct {
	ctrl     *gomock.Controller
	recorder *MockWhipEndpointResolverMockRecorder
}

// MockWhipEndpointResolverMockRecorder is the mock recorder for MockWhipEndpointResolver.
type MockWhipEndpointResolverMockRecorder struct {
	mock *MockWhipEndpointResolver
}

// NewMockWhipEndpointResolver creates a new mock instance.
func NewMockWhipEndpointResolver(ctrl *gomock.Controller) *MockWhipEndpointResolver {
	mock := &MockWhipEndpointResolver{ctrl: ctrl}
	mock.recorder = &MockWhipEndpointResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWhipEndpointResolver) EXPECT() *MockWhipEndpointResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockWhipEndpointResolver) Resolve(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockWhipEndpointResolverMockRecorder) Resolve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockWhipEndpointResolver)(nil).Resolve), arg0, arg1)
}
