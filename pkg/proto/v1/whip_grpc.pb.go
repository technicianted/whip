// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WhipClient is the client API for Whip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhipClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (Whip_RegisterClient, error)
}

type whipClient struct {
	cc grpc.ClientConnInterface
}

func NewWhipClient(cc grpc.ClientConnInterface) WhipClient {
	return &whipClient{cc}
}

func (c *whipClient) Register(ctx context.Context, opts ...grpc.CallOption) (Whip_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Whip_ServiceDesc.Streams[0], "/v1.Whip/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &whipRegisterClient{stream}
	return x, nil
}

type Whip_RegisterClient interface {
	Send(*RequestStream) error
	Recv() (*ResponseStream, error)
	grpc.ClientStream
}

type whipRegisterClient struct {
	grpc.ClientStream
}

func (x *whipRegisterClient) Send(m *RequestStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *whipRegisterClient) Recv() (*ResponseStream, error) {
	m := new(ResponseStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WhipServer is the server API for Whip service.
// All implementations must embed UnimplementedWhipServer
// for forward compatibility
type WhipServer interface {
	Register(Whip_RegisterServer) error
	mustEmbedUnimplementedWhipServer()
}

// UnimplementedWhipServer must be embedded to have forward compatible implementations.
type UnimplementedWhipServer struct {
}

func (UnimplementedWhipServer) Register(Whip_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedWhipServer) mustEmbedUnimplementedWhipServer() {}

// UnsafeWhipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhipServer will
// result in compilation errors.
type UnsafeWhipServer interface {
	mustEmbedUnimplementedWhipServer()
}

func RegisterWhipServer(s grpc.ServiceRegistrar, srv WhipServer) {
	s.RegisterService(&Whip_ServiceDesc, srv)
}

func _Whip_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WhipServer).Register(&whipRegisterServer{stream})
}

type Whip_RegisterServer interface {
	Send(*ResponseStream) error
	Recv() (*RequestStream, error)
	grpc.ServerStream
}

type whipRegisterServer struct {
	grpc.ServerStream
}

func (x *whipRegisterServer) Send(m *ResponseStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *whipRegisterServer) Recv() (*RequestStream, error) {
	m := new(RequestStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Whip_ServiceDesc is the grpc.ServiceDesc for Whip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Whip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Whip",
	HandlerType: (*WhipServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Whip_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/whip.proto",
}
