// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/technicianted/whip/pkg/proto/v1 (interfaces: WhipClient,WhipServer,Whip_RegisterServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/technicianted/whip/pkg/proto/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockWhipClient is a mock of WhipClient interface.
type MockWhipClient struct {
	ctrl     *gomock.Controller
	recorder *MockWhipClientMockRecorder
}

// MockWhipClientMockRecorder is the mock recorder for MockWhipClient.
type MockWhipClientMockRecorder struct {
	mock *MockWhipClient
}

// NewMockWhipClient creates a new mock instance.
func NewMockWhipClient(ctrl *gomock.Controller) *MockWhipClient {
	mock := &MockWhipClient{ctrl: ctrl}
	mock.recorder = &MockWhipClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWhipClient) EXPECT() *MockWhipClientMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockWhipClient) Register(arg0 context.Context, arg1 ...grpc.CallOption) (v1.Whip_RegisterClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(v1.Whip_RegisterClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockWhipClientMockRecorder) Register(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockWhipClient)(nil).Register), varargs...)
}

// MockWhipServer is a mock of WhipServer interface.
type MockWhipServer struct {
	ctrl     *gomock.Controller
	recorder *MockWhipServerMockRecorder
}

// MockWhipServerMockRecorder is the mock recorder for MockWhipServer.
type MockWhipServerMockRecorder struct {
	mock *MockWhipServer
}

// NewMockWhipServer creates a new mock instance.
func NewMockWhipServer(ctrl *gomock.Controller) *MockWhipServer {
	mock := &MockWhipServer{ctrl: ctrl}
	mock.recorder = &MockWhipServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWhipServer) EXPECT() *MockWhipServerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockWhipServer) Register(arg0 v1.Whip_RegisterServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockWhipServerMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockWhipServer)(nil).Register), arg0)
}

// mustEmbedUnimplementedWhipServer mocks base method.
func (m *MockWhipServer) mustEmbedUnimplementedWhipServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWhipServer")
}

// mustEmbedUnimplementedWhipServer indicates an expected call of mustEmbedUnimplementedWhipServer.
func (mr *MockWhipServerMockRecorder) mustEmbedUnimplementedWhipServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWhipServer", reflect.TypeOf((*MockWhipServer)(nil).mustEmbedUnimplementedWhipServer))
}

// MockWhip_RegisterServer is a mock of Whip_RegisterServer interface.
type MockWhip_RegisterServer struct {
	ctrl     *gomock.Controller
	recorder *MockWhip_RegisterServerMockRecorder
}

// MockWhip_RegisterServerMockRecorder is the mock recorder for MockWhip_RegisterServer.
type MockWhip_RegisterServerMockRecorder struct {
	mock *MockWhip_RegisterServer
}

// NewMockWhip_RegisterServer creates a new mock instance.
func NewMockWhip_RegisterServer(ctrl *gomock.Controller) *MockWhip_RegisterServer {
	mock := &MockWhip_RegisterServer{ctrl: ctrl}
	mock.recorder = &MockWhip_RegisterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWhip_RegisterServer) EXPECT() *MockWhip_RegisterServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockWhip_RegisterServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockWhip_RegisterServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockWhip_RegisterServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockWhip_RegisterServer) Recv() (*v1.RequestStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v1.RequestStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockWhip_RegisterServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockWhip_RegisterServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockWhip_RegisterServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockWhip_RegisterServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockWhip_RegisterServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockWhip_RegisterServer) Send(arg0 *v1.ResponseStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockWhip_RegisterServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWhip_RegisterServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockWhip_RegisterServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockWhip_RegisterServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockWhip_RegisterServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockWhip_RegisterServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockWhip_RegisterServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockWhip_RegisterServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockWhip_RegisterServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockWhip_RegisterServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockWhip_RegisterServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockWhip_RegisterServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockWhip_RegisterServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockWhip_RegisterServer)(nil).SetTrailer), arg0)
}
